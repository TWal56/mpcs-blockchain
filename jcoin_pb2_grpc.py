# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import jcoin_pb2 as jcoin__pb2


class RegistrarStub(object):
    """Service: Registrar
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/jcoin.Registrar/Register',
                request_serializer=jcoin__pb2.NewNode.SerializeToString,
                response_deserializer=jcoin__pb2.LastNode.FromString,
                )


class RegistrarServicer(object):
    """Service: Registrar
    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistrarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=jcoin__pb2.NewNode.FromString,
                    response_serializer=jcoin__pb2.LastNode.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jcoin.Registrar', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registrar(object):
    """Service: Registrar
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jcoin.Registrar/Register',
            jcoin__pb2.NewNode.SerializeToString,
            jcoin__pb2.LastNode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HandshakeStub(object):
    """Service: Handshake
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Shake = channel.unary_unary(
                '/jcoin.Handshake/Shake',
                request_serializer=jcoin__pb2.CallerShake.SerializeToString,
                response_deserializer=jcoin__pb2.ReceiverShake.FromString,
                )


class HandshakeServicer(object):
    """Service: Handshake
    """

    def Shake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HandshakeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Shake': grpc.unary_unary_rpc_method_handler(
                    servicer.Shake,
                    request_deserializer=jcoin__pb2.CallerShake.FromString,
                    response_serializer=jcoin__pb2.ReceiverShake.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jcoin.Handshake', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Handshake(object):
    """Service: Handshake
    """

    @staticmethod
    def Shake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jcoin.Handshake/Shake',
            jcoin__pb2.CallerShake.SerializeToString,
            jcoin__pb2.ReceiverShake.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TxnCastStub(object):
    """Service: TxnCast
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CastTrans = channel.unary_unary(
                '/jcoin.TxnCast/CastTrans',
                request_serializer=jcoin__pb2.NewTxn.SerializeToString,
                response_deserializer=jcoin__pb2.TxnReceived.FromString,
                )


class TxnCastServicer(object):
    """Service: TxnCast
    """

    def CastTrans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TxnCastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CastTrans': grpc.unary_unary_rpc_method_handler(
                    servicer.CastTrans,
                    request_deserializer=jcoin__pb2.NewTxn.FromString,
                    response_serializer=jcoin__pb2.TxnReceived.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jcoin.TxnCast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TxnCast(object):
    """Service: TxnCast
    """

    @staticmethod
    def CastTrans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jcoin.TxnCast/CastTrans',
            jcoin__pb2.NewTxn.SerializeToString,
            jcoin__pb2.TxnReceived.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BlockCastStub(object):
    """Service: BlockCast
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CastBlock = channel.unary_unary(
                '/jcoin.BlockCast/CastBlock',
                request_serializer=jcoin__pb2.NewBlock.SerializeToString,
                response_deserializer=jcoin__pb2.BlockReceived.FromString,
                )


class BlockCastServicer(object):
    """Service: BlockCast
    """

    def CastBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockCastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CastBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.CastBlock,
                    request_deserializer=jcoin__pb2.NewBlock.FromString,
                    response_serializer=jcoin__pb2.BlockReceived.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jcoin.BlockCast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockCast(object):
    """Service: BlockCast
    """

    @staticmethod
    def CastBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jcoin.BlockCast/CastBlock',
            jcoin__pb2.NewBlock.SerializeToString,
            jcoin__pb2.BlockReceived.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
